//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace NetSaleSvc.Api.CTMS.NationalStandardService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NsServiceSoap", Namespace="NsService")]
    public partial class NsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback QueryCinemaOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuerySeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryFilmOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuerySessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuerySessionSeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockSeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleaseSeatOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryPrintOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryOrderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NsService() {
            this.Url = global::NetSaleSvc.Api.CTMS.Properties.Settings.Default.NetSaleSvc_Api_CTMS_NationalStandardService_NsService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event QueryCinemaCompletedEventHandler QueryCinemaCompleted;
        
        /// <remarks/>
        public event QuerySeatCompletedEventHandler QuerySeatCompleted;
        
        /// <remarks/>
        public event QueryFilmCompletedEventHandler QueryFilmCompleted;
        
        /// <remarks/>
        public event QuerySessionCompletedEventHandler QuerySessionCompleted;
        
        /// <remarks/>
        public event QuerySessionSeatCompletedEventHandler QuerySessionSeatCompleted;
        
        /// <remarks/>
        public event LockSeatCompletedEventHandler LockSeatCompleted;
        
        /// <remarks/>
        public event ReleaseSeatCompletedEventHandler ReleaseSeatCompleted;
        
        /// <remarks/>
        public event SubmitOrderCompletedEventHandler SubmitOrderCompleted;
        
        /// <remarks/>
        public event QueryPrintCompletedEventHandler QueryPrintCompleted;
        
        /// <remarks/>
        public event RefundTicketCompletedEventHandler RefundTicketCompleted;
        
        /// <remarks/>
        public event QueryOrderCompletedEventHandler QueryOrderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QueryCinema", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryCinema(string username, string password, string url, string soap, string CinemaCode) {
            object[] results = this.Invoke("QueryCinema", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCinemaAsync(string username, string password, string url, string soap, string CinemaCode) {
            this.QueryCinemaAsync(username, password, url, soap, CinemaCode, null);
        }
        
        /// <remarks/>
        public void QueryCinemaAsync(string username, string password, string url, string soap, string CinemaCode, object userState) {
            if ((this.QueryCinemaOperationCompleted == null)) {
                this.QueryCinemaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCinemaOperationCompleted);
            }
            this.InvokeAsync("QueryCinema", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode}, this.QueryCinemaOperationCompleted, userState);
        }
        
        private void OnQueryCinemaOperationCompleted(object arg) {
            if ((this.QueryCinemaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCinemaCompleted(this, new QueryCinemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QuerySeat", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QuerySeat(string username, string password, string url, string soap, string CinemaCode, string ScreenCode) {
            object[] results = this.Invoke("QuerySeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        ScreenCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuerySeatAsync(string username, string password, string url, string soap, string CinemaCode, string ScreenCode) {
            this.QuerySeatAsync(username, password, url, soap, CinemaCode, ScreenCode, null);
        }
        
        /// <remarks/>
        public void QuerySeatAsync(string username, string password, string url, string soap, string CinemaCode, string ScreenCode, object userState) {
            if ((this.QuerySeatOperationCompleted == null)) {
                this.QuerySeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuerySeatOperationCompleted);
            }
            this.InvokeAsync("QuerySeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        ScreenCode}, this.QuerySeatOperationCompleted, userState);
        }
        
        private void OnQuerySeatOperationCompleted(object arg) {
            if ((this.QuerySeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuerySeatCompleted(this, new QuerySeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QueryFilm", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryFilm(string username, string password, string url, string soap, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("QueryFilm", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryFilmAsync(string username, string password, string url, string soap, System.DateTime StartDate, System.DateTime EndDate) {
            this.QueryFilmAsync(username, password, url, soap, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void QueryFilmAsync(string username, string password, string url, string soap, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.QueryFilmOperationCompleted == null)) {
                this.QueryFilmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryFilmOperationCompleted);
            }
            this.InvokeAsync("QueryFilm", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        StartDate,
                        EndDate}, this.QueryFilmOperationCompleted, userState);
        }
        
        private void OnQueryFilmOperationCompleted(object arg) {
            if ((this.QueryFilmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryFilmCompleted(this, new QueryFilmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QuerySession", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QuerySession(string username, string password, string url, string soap, string CinemaCode, System.DateTime StartDate, System.DateTime EndDate) {
            object[] results = this.Invoke("QuerySession", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        StartDate,
                        EndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuerySessionAsync(string username, string password, string url, string soap, string CinemaCode, System.DateTime StartDate, System.DateTime EndDate) {
            this.QuerySessionAsync(username, password, url, soap, CinemaCode, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void QuerySessionAsync(string username, string password, string url, string soap, string CinemaCode, System.DateTime StartDate, System.DateTime EndDate, object userState) {
            if ((this.QuerySessionOperationCompleted == null)) {
                this.QuerySessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuerySessionOperationCompleted);
            }
            this.InvokeAsync("QuerySession", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        StartDate,
                        EndDate}, this.QuerySessionOperationCompleted, userState);
        }
        
        private void OnQuerySessionOperationCompleted(object arg) {
            if ((this.QuerySessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuerySessionCompleted(this, new QuerySessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QuerySessionSeat", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QuerySessionSeat(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string Status) {
            object[] results = this.Invoke("QuerySessionSeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QuerySessionSeatAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string Status) {
            this.QuerySessionSeatAsync(username, password, url, soap, CinemaCode, SessionCode, Status, null);
        }
        
        /// <remarks/>
        public void QuerySessionSeatAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string Status, object userState) {
            if ((this.QuerySessionSeatOperationCompleted == null)) {
                this.QuerySessionSeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuerySessionSeatOperationCompleted);
            }
            this.InvokeAsync("QuerySessionSeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        Status}, this.QuerySessionSeatOperationCompleted, userState);
        }
        
        private void OnQuerySessionSeatOperationCompleted(object arg) {
            if ((this.QuerySessionSeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuerySessionSeatCompleted(this, new QuerySessionSeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/LockSeat", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LockSeat(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string Seats) {
            object[] results = this.Invoke("LockSeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        Seats});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LockSeatAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string Seats) {
            this.LockSeatAsync(username, password, url, soap, CinemaCode, SessionCode, Seats, null);
        }
        
        /// <remarks/>
        public void LockSeatAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string Seats, object userState) {
            if ((this.LockSeatOperationCompleted == null)) {
                this.LockSeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockSeatOperationCompleted);
            }
            this.InvokeAsync("LockSeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        Seats}, this.LockSeatOperationCompleted, userState);
        }
        
        private void OnLockSeatOperationCompleted(object arg) {
            if ((this.LockSeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockSeatCompleted(this, new LockSeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/ReleaseSeat", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReleaseSeat(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string OrderCode, string Seats) {
            object[] results = this.Invoke("ReleaseSeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        OrderCode,
                        Seats});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReleaseSeatAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string OrderCode, string Seats) {
            this.ReleaseSeatAsync(username, password, url, soap, CinemaCode, SessionCode, OrderCode, Seats, null);
        }
        
        /// <remarks/>
        public void ReleaseSeatAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string OrderCode, string Seats, object userState) {
            if ((this.ReleaseSeatOperationCompleted == null)) {
                this.ReleaseSeatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleaseSeatOperationCompleted);
            }
            this.InvokeAsync("ReleaseSeat", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        OrderCode,
                        Seats}, this.ReleaseSeatOperationCompleted, userState);
        }
        
        private void OnReleaseSeatOperationCompleted(object arg) {
            if ((this.ReleaseSeatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleaseSeatCompleted(this, new ReleaseSeatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/SubmitOrder", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SubmitOrder(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string OrderCode, string Seats, string Prices) {
            object[] results = this.Invoke("SubmitOrder", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        OrderCode,
                        Seats,
                        Prices});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitOrderAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string OrderCode, string Seats, string Prices) {
            this.SubmitOrderAsync(username, password, url, soap, CinemaCode, SessionCode, OrderCode, Seats, Prices, null);
        }
        
        /// <remarks/>
        public void SubmitOrderAsync(string username, string password, string url, string soap, string CinemaCode, string SessionCode, string OrderCode, string Seats, string Prices, object userState) {
            if ((this.SubmitOrderOperationCompleted == null)) {
                this.SubmitOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitOrderOperationCompleted);
            }
            this.InvokeAsync("SubmitOrder", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        SessionCode,
                        OrderCode,
                        Seats,
                        Prices}, this.SubmitOrderOperationCompleted, userState);
        }
        
        private void OnSubmitOrderOperationCompleted(object arg) {
            if ((this.SubmitOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitOrderCompleted(this, new SubmitOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QueryPrint", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryPrint(string username, string password, string url, string soap, string CinemaCode, string PrintNo, string VerifyCode) {
            object[] results = this.Invoke("QueryPrint", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        PrintNo,
                        VerifyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryPrintAsync(string username, string password, string url, string soap, string CinemaCode, string PrintNo, string VerifyCode) {
            this.QueryPrintAsync(username, password, url, soap, CinemaCode, PrintNo, VerifyCode, null);
        }
        
        /// <remarks/>
        public void QueryPrintAsync(string username, string password, string url, string soap, string CinemaCode, string PrintNo, string VerifyCode, object userState) {
            if ((this.QueryPrintOperationCompleted == null)) {
                this.QueryPrintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryPrintOperationCompleted);
            }
            this.InvokeAsync("QueryPrint", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        PrintNo,
                        VerifyCode}, this.QueryPrintOperationCompleted, userState);
        }
        
        private void OnQueryPrintOperationCompleted(object arg) {
            if ((this.QueryPrintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryPrintCompleted(this, new QueryPrintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/RefundTicket", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RefundTicket(string username, string password, string url, string soap, string CinemaCode, string PrintNo, string VerifyCode) {
            object[] results = this.Invoke("RefundTicket", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        PrintNo,
                        VerifyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RefundTicketAsync(string username, string password, string url, string soap, string CinemaCode, string PrintNo, string VerifyCode) {
            this.RefundTicketAsync(username, password, url, soap, CinemaCode, PrintNo, VerifyCode, null);
        }
        
        /// <remarks/>
        public void RefundTicketAsync(string username, string password, string url, string soap, string CinemaCode, string PrintNo, string VerifyCode, object userState) {
            if ((this.RefundTicketOperationCompleted == null)) {
                this.RefundTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundTicketOperationCompleted);
            }
            this.InvokeAsync("RefundTicket", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        PrintNo,
                        VerifyCode}, this.RefundTicketOperationCompleted, userState);
        }
        
        private void OnRefundTicketOperationCompleted(object arg) {
            if ((this.RefundTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundTicketCompleted(this, new RefundTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("NsService/QueryOrder", RequestNamespace="NsService", ResponseNamespace="NsService", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryOrder(string username, string password, string url, string soap, string CinemaCode, string OrderCode) {
            object[] results = this.Invoke("QueryOrder", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        OrderCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryOrderAsync(string username, string password, string url, string soap, string CinemaCode, string OrderCode) {
            this.QueryOrderAsync(username, password, url, soap, CinemaCode, OrderCode, null);
        }
        
        /// <remarks/>
        public void QueryOrderAsync(string username, string password, string url, string soap, string CinemaCode, string OrderCode, object userState) {
            if ((this.QueryOrderOperationCompleted == null)) {
                this.QueryOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryOrderOperationCompleted);
            }
            this.InvokeAsync("QueryOrder", new object[] {
                        username,
                        password,
                        url,
                        soap,
                        CinemaCode,
                        OrderCode}, this.QueryOrderOperationCompleted, userState);
        }
        
        private void OnQueryOrderOperationCompleted(object arg) {
            if ((this.QueryOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryOrderCompleted(this, new QueryOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QueryCinemaCompletedEventHandler(object sender, QueryCinemaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCinemaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCinemaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QuerySeatCompletedEventHandler(object sender, QuerySeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuerySeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuerySeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QueryFilmCompletedEventHandler(object sender, QueryFilmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryFilmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryFilmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QuerySessionCompletedEventHandler(object sender, QuerySessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuerySessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuerySessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QuerySessionSeatCompletedEventHandler(object sender, QuerySessionSeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuerySessionSeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuerySessionSeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void LockSeatCompletedEventHandler(object sender, LockSeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockSeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockSeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ReleaseSeatCompletedEventHandler(object sender, ReleaseSeatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleaseSeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleaseSeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SubmitOrderCompletedEventHandler(object sender, SubmitOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QueryPrintCompletedEventHandler(object sender, QueryPrintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryPrintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryPrintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void RefundTicketCompletedEventHandler(object sender, RefundTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QueryOrderCompletedEventHandler(object sender, QueryOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace NetSaleSvc.Api.CTMS.NsFetchTicket {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FetchTicketSvcSoap", Namespace="FetchTicketSvc")]
    public partial class FetchTicketSvc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback QueryTicketInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyFetchTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchTicketOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FetchTicketSvc() {
            this.Url = global::NetSaleSvc.Api.CTMS.Properties.Settings.Default.NetSaleSvc_Api_CTMS_NsFetchTicket_FetchTicketSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event QueryTicketInfoCompletedEventHandler QueryTicketInfoCompleted;
        
        /// <remarks/>
        public event ApplyFetchTicketCompletedEventHandler ApplyFetchTicketCompleted;
        
        /// <remarks/>
        public event FetchTicketCompletedEventHandler FetchTicketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FetchTicketSvc/QueryTicketInfo", RequestNamespace="FetchTicketSvc", ResponseNamespace="FetchTicketSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryTicketInfo(string IpAddress, string UserName, string Password, string PrintNo) {
            object[] results = this.Invoke("QueryTicketInfo", new object[] {
                        IpAddress,
                        UserName,
                        Password,
                        PrintNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryTicketInfoAsync(string IpAddress, string UserName, string Password, string PrintNo) {
            this.QueryTicketInfoAsync(IpAddress, UserName, Password, PrintNo, null);
        }
        
        /// <remarks/>
        public void QueryTicketInfoAsync(string IpAddress, string UserName, string Password, string PrintNo, object userState) {
            if ((this.QueryTicketInfoOperationCompleted == null)) {
                this.QueryTicketInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryTicketInfoOperationCompleted);
            }
            this.InvokeAsync("QueryTicketInfo", new object[] {
                        IpAddress,
                        UserName,
                        Password,
                        PrintNo}, this.QueryTicketInfoOperationCompleted, userState);
        }
        
        private void OnQueryTicketInfoOperationCompleted(object arg) {
            if ((this.QueryTicketInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryTicketInfoCompleted(this, new QueryTicketInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FetchTicketSvc/ApplyFetchTicket", RequestNamespace="FetchTicketSvc", ResponseNamespace="FetchTicketSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ApplyFetchTicket(string IpAddress, string UserName, string Password, string PrintNo, string VerifyCode) {
            object[] results = this.Invoke("ApplyFetchTicket", new object[] {
                        IpAddress,
                        UserName,
                        Password,
                        PrintNo,
                        VerifyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyFetchTicketAsync(string IpAddress, string UserName, string Password, string PrintNo, string VerifyCode) {
            this.ApplyFetchTicketAsync(IpAddress, UserName, Password, PrintNo, VerifyCode, null);
        }
        
        /// <remarks/>
        public void ApplyFetchTicketAsync(string IpAddress, string UserName, string Password, string PrintNo, string VerifyCode, object userState) {
            if ((this.ApplyFetchTicketOperationCompleted == null)) {
                this.ApplyFetchTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyFetchTicketOperationCompleted);
            }
            this.InvokeAsync("ApplyFetchTicket", new object[] {
                        IpAddress,
                        UserName,
                        Password,
                        PrintNo,
                        VerifyCode}, this.ApplyFetchTicketOperationCompleted, userState);
        }
        
        private void OnApplyFetchTicketOperationCompleted(object arg) {
            if ((this.ApplyFetchTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyFetchTicketCompleted(this, new ApplyFetchTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FetchTicketSvc/FetchTicket", RequestNamespace="FetchTicketSvc", ResponseNamespace="FetchTicketSvc", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FetchTicket(string IpAddress, string UserName, string Password, string PrintNo) {
            object[] results = this.Invoke("FetchTicket", new object[] {
                        IpAddress,
                        UserName,
                        Password,
                        PrintNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FetchTicketAsync(string IpAddress, string UserName, string Password, string PrintNo) {
            this.FetchTicketAsync(IpAddress, UserName, Password, PrintNo, null);
        }
        
        /// <remarks/>
        public void FetchTicketAsync(string IpAddress, string UserName, string Password, string PrintNo, object userState) {
            if ((this.FetchTicketOperationCompleted == null)) {
                this.FetchTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchTicketOperationCompleted);
            }
            this.InvokeAsync("FetchTicket", new object[] {
                        IpAddress,
                        UserName,
                        Password,
                        PrintNo}, this.FetchTicketOperationCompleted, userState);
        }
        
        private void OnFetchTicketOperationCompleted(object arg) {
            if ((this.FetchTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchTicketCompleted(this, new FetchTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void QueryTicketInfoCompletedEventHandler(object sender, QueryTicketInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryTicketInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryTicketInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ApplyFetchTicketCompletedEventHandler(object sender, ApplyFetchTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyFetchTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyFetchTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void FetchTicketCompletedEventHandler(object sender, FetchTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591